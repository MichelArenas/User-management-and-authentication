// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMINISTRADOR
  MEDICO
  ENFERMERO
  PACIENTE
}

model Users {
  id                      String          @id @default(auto()) @map("_id") @db.ObjectId
  email                   String          @unique
  fullname                String
  password                String
  role                    Role
  status                  String          @default("PENDING")
  verificationCode        String?
  verificationCodeExpires DateTime?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  activityLogs            ActivityLog[]
  userDeptRoles           UserDeptRoles[] @relation("UserToAffiliations")
}

model ActivityLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?  @db.ObjectId
  userEmail  String?
  userName   String?
  action     String
  entityType String?
  entityId   String?  @db.ObjectId
  oldValues  Json?
  newValues  Json?
  details    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       Users?   @relation(fields: [userId], references: [id])
}

model Departments {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  name         String          @unique
  specialties  Specialties[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  affiliations UserDeptRoles[] @relation("DepartmentToAffiliations")
}

model Specialties {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  name         String          @unique
  departmentId String          @db.ObjectId
  department   Departments     @relation(fields: [departmentId], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  affiliations UserDeptRoles[] @relation("SpecialtyToAffiliations")
}

// vínculo Usuario–Departamento–Rol (permite RBAC por ámbito)
model UserDeptRoles {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  userId       String       @db.ObjectId
  departmentId String       @db.ObjectId
  role         Role
  specialtyId  String?      @db.ObjectId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         Users        @relation("UserToAffiliations", fields: [userId], references: [id])
  department   Departments  @relation("DepartmentToAffiliations", fields: [departmentId], references: [id])
  specialty    Specialties? @relation("SpecialtyToAffiliations", fields: [specialtyId], references: [id])
}
