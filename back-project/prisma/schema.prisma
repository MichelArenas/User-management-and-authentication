// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMINISTRADOR
  MEDICO
  ENFERMERO
  PACIENTE
}

model Users {
  id                      String        @id @default(auto()) @map("_id") @db.ObjectId
  email                   String        @unique
  fullname                String
  password                String
  role                    Role
  isActive                Boolean       @default(true)
  status                  String        @default("PENDING")
  verificationCode        String?
  verificationCodeExpires DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  activityLogs            ActivityLog[]
}

model ActivityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  userEmail String?
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  email     String   @unique
  fullname  String
  password  String
  role      Role
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user Users? @relation(fields: [userId], references: [id])
}

model Departments {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  specialties Specialties[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Specialties {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String      @unique
  departmentId String      @db.ObjectId
  departament  Departments @relation(fields: [departmentId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

// vínculo Usuario–Departamento–Rol (permite RBAC por ámbito)
model UserDeptRoles {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  userId       String  @db.ObjectId
  departmentId String  @db.ObjectId
  role         Role
  specialtyId  String? @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
